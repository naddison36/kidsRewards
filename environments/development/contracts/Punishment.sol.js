// Factory "morphs" into a Pudding class.
// The reasoning is that calling load in each context
// is cumbersome.

(function() {

  var contract_data = {
    abi: [{"constant":true,"inputs":[],"name":"worker","outputs":[{"name":"","type":"address"}],"type":"function"},{"constant":true,"inputs":[],"name":"description","outputs":[{"name":"","type":"string"}],"type":"function"},{"constant":true,"inputs":[],"name":"superviser","outputs":[{"name":"","type":"address"}],"type":"function"},{"inputs":[{"name":"_id","type":"uint256"},{"name":"_worker","type":"address"},{"name":"_description","type":"string"},{"name":"_rewards","type":"uint256"}],"type":"constructor"}],
    binary: "60606040526040516102b33803806102b383398101604052805160805160a05160c0519293919291019060a051600085815583516003805492819052926020601f600260001961010060018816150201909516949094048401047fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9081019390916080019083901061010e57805160ff19168380011785555b506100b49291505b8082111561013e57600081556001016100a0565b50508060046000508190555033600160006101000a815481600160a060020a030219169083021790555082600260006101000a815481600160a060020a030219169083021790555050505050610171806101426000396000f35b82800160010185558215610098579182015b82811115610098578251826000505591602001919060010190610120565b509056606060405236156100355760e060020a60003504634d547ada811461003d5780637284e4161461004f578063b1956238146100ab575b610000610002565b6100bd600254600160a060020a031681565b6100d0600380546020601f600260001960018516156101000201909316929092049182018190040260809081016040526060828152929190828280156101695780601f1061013e57610100808354040283529160200191610169565b6100bd600154600160a060020a031681565b600160a060020a03166060908152602090f35b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600f02600301f150905090810190601f1680156101305780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b820191906000526020600020905b81548152906001019060200180831161014c57829003601f168201915b50505050508156",
    unlinked_binary: "60606040526040516102b33803806102b383398101604052805160805160a05160c0519293919291019060a051600085815583516003805492819052926020601f600260001961010060018816150201909516949094048401047fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9081019390916080019083901061010e57805160ff19168380011785555b506100b49291505b8082111561013e57600081556001016100a0565b50508060046000508190555033600160006101000a815481600160a060020a030219169083021790555082600260006101000a815481600160a060020a030219169083021790555050505050610171806101426000396000f35b82800160010185558215610098579182015b82811115610098578251826000505591602001919060010190610120565b509056606060405236156100355760e060020a60003504634d547ada811461003d5780637284e4161461004f578063b1956238146100ab575b610000610002565b6100bd600254600160a060020a031681565b6100d0600380546020601f600260001960018516156101000201909316929092049182018190040260809081016040526060828152929190828280156101695780601f1061013e57610100808354040283529160200191610169565b6100bd600154600160a060020a031681565b600160a060020a03166060908152602090f35b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600f02600301f150905090810190601f1680156101305780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b820191906000526020600020905b81548152906001019060200180831161014c57829003601f168201915b50505050508156",
    address: "",
    generated_with: "2.0.8",
    contract_name: "Punishment"
  };

  function Contract() {
    if (Contract.Pudding == null) {
      throw new Error("Punishment error: Please call load() first before creating new instance of this contract.");
    }

    Contract.Pudding.apply(this, arguments);
  };

  Contract.load = function(Pudding) {
    Contract.Pudding = Pudding;

    Pudding.whisk(contract_data, Contract);

    // Return itself for backwards compatibility.
    return Contract;
  }

  Contract.new = function() {
    if (Contract.Pudding == null) {
      throw new Error("Punishment error: Please call load() first before calling new().");
    }

    return Contract.Pudding.new.apply(Contract, arguments);
  };

  Contract.at = function() {
    if (Contract.Pudding == null) {
      throw new Error("Punishment error: Please call load() first before calling at().");
    }

    return Contract.Pudding.at.apply(Contract, arguments);
  };

  Contract.deployed = function() {
    if (Contract.Pudding == null) {
      throw new Error("Punishment error: Please call load() first before calling deployed().");
    }

    return Contract.Pudding.deployed.apply(Contract, arguments);
  };

  if (typeof module != "undefined" && typeof module.exports != "undefined") {
    module.exports = Contract;
  } else {
    // There will only be one version of Pudding in the browser,
    // and we can use that.
    window.Punishment = Contract;
  }

})();
